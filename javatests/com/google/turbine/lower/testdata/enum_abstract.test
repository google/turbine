=== Test.java ===
class Test {
  enum E {
    ONE,
    TWO {
      // javac drops the inaccessible member f() and doesn't generate
      // an instance class for ONE, so E doesn't need to be abstract.
      public void f() {
        System.err.println("hello");
      }
    };
  }
}
=== I.java ===
interface I {
  void f();
}
=== EnumConstantImplementsInterface.java ===
enum EnumConstantImplementsInterface implements I {
  ONE {
    @Override
    public void f() {}
  };
}
=== EnumImplementsInterface.java ===
enum EnumImplementsInterface implements I {
  ONE;

  public void f() {}
}
=== EnumConstantImplementsMethod.java ===
enum EnumConstantImplementsMethod {
  ONE {
    @Override
    public void f() {}
  };
  public void f() {}
}
=== EnumConstantEmptyBody.java ===
enum EnumConstantEmptyBody {
  ONE {
  };
}